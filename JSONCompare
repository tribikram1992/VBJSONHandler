import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.File;
import java.io.IOException;
import java.util.Iterator;
import java.util.List;

public class JsonComparator {

    /**
     * Compares two JSON objects while skipping specified fields.
     *
     * @param jsonFilePath  The path to the JSON file.
     * @param apiResponse   The API response as a JSON string.
     * @param skipPaths     List of JSON paths to skip during comparison.
     * @return True if the JSON objects are equal (ignoring skipped fields), otherwise false.
     * @throws IOException If there's an error reading the JSON file.
     */
    public static boolean compareJson(String jsonFilePath, String apiResponse, List<String> skipPaths) throws IOException {
        ObjectMapper objectMapper = new ObjectMapper();

        // Load the JSON file and parse the API response
        JsonNode fileJson = objectMapper.readTree(new File(jsonFilePath));
        JsonNode responseJson = objectMapper.readTree(apiResponse);

        // Remove skipped paths from both JSON nodes
        removePaths(fileJson, skipPaths);
        removePaths(responseJson, skipPaths);

        // Compare the modified JSON nodes
        return fileJson.equals(responseJson);
    }

    /**
     * Removes specified paths from a JSON node.
     *
     * @param rootNode  The root JSON node.
     * @param skipPaths List of JSON paths to remove.
     */
    private static void removePaths(JsonNode rootNode, List<String> skipPaths) {
        for (String path : skipPaths) {
            String[] parts = path.split("\\.");
            removePathRecursive(rootNode, parts, 0);
        }
    }

    /**
     * Recursively removes a path from a JSON node.
     *
     * @param node      The current JSON node.
     * @param parts     Array of path parts.
     * @param index     Current index in the path parts array.
     */
    private static void removePathRecursive(JsonNode node, String[] parts, int index) {
        if (node == null || index >= parts.length) return;

        String key = parts[index];
        if (index == parts.length - 1) {
            ((ObjectNode) node).remove(key);
        } else {
            JsonNode child = node.get(key);
            if (child != null && child.isObject()) {
                removePathRecursive(child, parts, index + 1);
            }
        }
    }

    public static void main(String[] args) {
        try {
            String jsonFilePath = "example.json";
            String apiResponse = "{ \"key1\": \"value1\", \"key2\": \"value2\" }";
            List<String> skipPaths = List.of("key2");

            boolean isEqual = compareJson(jsonFilePath, apiResponse, skipPaths);
            System.out.println("JSONs are equal (ignoring skipped paths): " + isEqual);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
